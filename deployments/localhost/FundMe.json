{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MINUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAmtFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "i",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x752e57a4b3f3e070bfe14589f9833aa15d6682c2945b6dbfef07ee678e0da59c",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "980682",
    "logsBloom": "0x
    "blockHash": "0x03b1516b30644d59c0a1a50814bd69af0603a5176c437f39f07581e9f2936566",
    "transactionHash": "0x752e57a4b3f3e070bfe14589f9833aa15d6682c2945b6dbfef07ee678e0da59c",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "980682",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "42b0c79ca8e110ac1be9b4410b28b758",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MINUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAmtFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"i\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// solhint-disable-next-line interface-starts-with-i\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(\\n    uint80 _roundId\\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0x257a8d28fa83d3d942547c8e129ef465e4b5f3f31171e7be4739a4c98da6b4f0\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Gets funds from users\\r\\n// withdraw\\r\\n// set min value in usd\\r\\n\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport \\\"./PriceConverterLib.sol\\\";\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\ncontract FundMe {\\r\\n    //Type Declarations\\r\\n    using PriceConverter for uint256;\\r\\n\\r\\n    //State Variables\\r\\n    // i => immutable, cheapest variables\\r\\n    // s => storage, costliest\\r\\n    uint256 public constant MINUSD = 50 * 1e18;\\r\\n\\r\\n    address[] private funders;\\r\\n    mapping(address => uint256) private amtFunded;\\r\\n\\r\\n    address private immutable i_owner;\\r\\n\\r\\n    AggregatorV3Interface private priceFeed;\\r\\n\\r\\n    //modifiers\\r\\n    modifier onlyOwnerAccess() {\\r\\n        require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\r\\n        _; // rest of the code\\r\\n    }\\r\\n\\r\\n    // functions\\r\\n    constructor(address priceFeedAddress) {\\r\\n        i_owner = msg.sender; // whoever is deploying the contract\\r\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\r\\n    }\\r\\n\\r\\n    function fund() public payable {\\r\\n        //require(getConversionRate(msg.value) >= MINUSD, \\\"Less Than Min Value\\\"); // 1e10 == 1 * 10 ** 18 (18 decimal places)\\r\\n        require(\\r\\n            msg.value.getConversionRate(priceFeed) >= MINUSD,\\r\\n            \\\"Less Than Min Value.\\\"\\r\\n        );\\r\\n\\r\\n        funders.push(msg.sender);\\r\\n        amtFunded[msg.sender] = msg.value;\\r\\n    }\\r\\n\\r\\n    function withdraw() public payable onlyOwnerAccess {\\r\\n        // funders array, which contains the addresses of all users who have contributed funds (amtFunded mapping).\\r\\n        //For each funder, it sets their funded amount to zero (amtFunded[funder] = 0), effectively clearing their contribution.\\r\\n\\r\\n        // for loop costs a lot to read from stoarge variable funders\\r\\n        for (uint256 i = 0; i < funders.length; i++) {\\r\\n            address funder = funders[i];\\r\\n            amtFunded[funder] = 0;\\r\\n        }\\r\\n\\r\\n        //It then resets the funders array to an empty array (new address ), effectively clearing the list of funders.\\r\\n        funders = new address[](0); // reset\\r\\n\\r\\n        // transfer\\r\\n        // msg.sender = address\\r\\n        // address(this) sends whole contract address\\r\\n        payable(msg.sender).transfer(address(this).balance);\\r\\n\\r\\n        // send\\r\\n        // bool success = payable(msg.sender).send(address(this).balance);\\r\\n        // require(success, \\\"Failed\\\");\\r\\n\\r\\n        //call\\r\\n        // (bool success, ) = payable(msg.sender).call{\\r\\n        //     value: address(this).balance\\r\\n        // }(\\\"\\\");\\r\\n        // require(success, \\\"Failed\\\");\\r\\n    }\\r\\n\\r\\n    function cheaperWithdraw() public payable onlyOwnerAccess {\\r\\n        address[] memory m_funders = funders; // memory is cheaper than storage. funders is storage variable\\r\\n        // mapping not allowed in memory\\r\\n        for (uint256 i = 0; i < m_funders.length; i++) {\\r\\n            address funder = m_funders[i];\\r\\n            amtFunded[funder] = 0;\\r\\n        }\\r\\n        funders = new address[](0); // reset\\r\\n        (bool success, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\r\\n        require(success, \\\"Failed\\\");\\r\\n    }\\r\\n\\r\\n    //getters\\r\\n    function getOwner() public view returns (address) {\\r\\n        return i_owner;\\r\\n    }\\r\\n\\r\\n    function getFunder(uint256 i) public view returns (address) {\\r\\n        return funders[i];\\r\\n    }\\r\\n\\r\\n    function getAmtFunded(address funder) public view returns (uint256) {\\r\\n        return amtFunded[funder];\\r\\n    }\\r\\n\\r\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\r\\n        return priceFeed;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6185f2f5fe6522abe16457fbe695c372a7df70315aa33a2f178ea5ff72787c26\",\"license\":\"MIT\"},\"contracts/PriceConverterLib.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.19;\\r\\n\\r\\nimport {AggregatorV3Interface} from \\\"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    function getPrice(\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) public view returns (uint256) {\\r\\n        //ABI\\r\\n        // Address 0x694AA1769357215DE4FAC081bf1f309aDC325306 from ChainLink\\r\\n\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        // price is int256 becoz some can be negative\\r\\n        // price is ETH in terms of USD i.e. 3000.00000000\\r\\n        // to match decimals multiply with 10 more decimals\\r\\n\\r\\n        return uint256(price * 1e10);\\r\\n    }\\r\\n\\r\\n    // function getVersion() internal view returns (uint256) {\\r\\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\\r\\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\\r\\n    //     );\\r\\n    //     return priceFeed.version();\\r\\n    // }\\r\\n\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        // 3000_000000000000000000 = ETH / USD price\\r\\n        // 1_000000000000000000 ETH\\r\\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\\r\\n        return ethAmountInUSD;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x544eecbfc4bbac20dcdc0ad001b4afd42790a67696ce359ac2813ab3f135ddfa\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620011de380380620011de83398181016040528101906200003791906200011d565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200014f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e582620000b8565b9050919050565b620000f781620000d8565b81146200010357600080fd5b50565b6000815190506200011781620000ec565b92915050565b600060208284031215620001365762000135620000b3565b5b6000620001468482850162000106565b91505092915050565b60805161105e620001806000396000818161019b015281816103d60152818161054f015261074e015261105e6000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80633ccfd60b146100805780634dc936161461008a5780637a85ab06146100b5578063893d20e8146100f2575b600080fd5b610088610199565b005b34801561009657600080fd5b5061009f61037c565b6040516100ac91906109ee565b60405180910390f35b3480156100c157600080fd5b506100dc60048036038101906100d79190610a6c565b610389565b6040516100e991906109ee565b60405180910390f35b3480156100fe57600080fd5b506101076103d2565b6040516101149190610aa8565b60405180910390f35b34801561012957600080fd5b506101326103fa565b60405161013f9190610b22565b60405180910390f35b610150610424565b005b61015a61054d565b005b34801561016857600080fd5b50610183600480360381019061017e9190610b69565b61081a565b6040516101909190610aa8565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610bf3565b60405180910390fd5b60005b6000805490508110156102d257600080828154811061024c5761024b610c13565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ca90610c71565b91505061022a565b50600067ffffffffffffffff8111156102ee576102ed610cb9565b5b60405190808252806020026020018201604052801561031c5781602001602082028036833780820191505090505b506000908051906020019061033292919061092e565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610379573d6000803e3d6000fd5b50565b6802b5e3af16b188000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610463600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086190919063ffffffff16565b10156104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90610d34565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290610bf3565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610614575b5050505050905060005b81518110156106e957600082828151811061068657610685610c13565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106e190610c71565b915050610668565b50600067ffffffffffffffff81111561070557610704610cb9565b5b6040519080825280602002602001820160405280156107335781602001602082028036833780820191505090505b506000908051906020019061074992919061092e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161079090610d85565b60006040518083038185875af1925050503d80600081146107cd576040519150601f19603f3d011682016040523d82523d6000602084013e6107d2565b606091505b5050905080610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d90610de6565b60405180910390fd5b5050565b600080828154811061082f5761082e610c13565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086d8361089d565b90506000670de0b6b3a764000085836108869190610e06565b6108909190610e77565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190610f35565b5050509150506402540be400816109269190610fb0565b915050919050565b8280548282559060005260206000209081019282156109a7579160200282015b828111156109a65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061094e565b5b5090506109b491906109b8565b5090565b5b808211156109d15760008160009055506001016109b9565b5090565b6000819050919050565b6109e8816109d5565b82525050565b6000602082019050610a0360008301846109df565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3982610a0e565b9050919050565b610a4981610a2e565b8114610a5457600080fd5b50565b600081359050610a6681610a40565b92915050565b600060208284031215610a8257610a81610a09565b5b6000610a9084828501610a57565b91505092915050565b610aa281610a2e565b82525050565b6000602082019050610abd6000830184610a99565b92915050565b6000819050919050565b6000610ae8610ae3610ade84610a0e565b610ac3565b610a0e565b9050919050565b6000610afa82610acd565b9050919050565b6000610b0c82610aef565b9050919050565b610b1c81610b01565b82525050565b6000602082019050610b376000830184610b13565b92915050565b610b46816109d5565b8114610b5157600080fd5b50565b600081359050610b6381610b3d565b92915050565b600060208284031215610b7f57610b7e610a09565b5b6000610b8d84828501610b54565b91505092915050565b600082825260208201905092915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610bdd601383610b96565b9150610be882610ba7565b602082019050919050565b60006020820190508181036000830152610c0c81610bd0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7c826109d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cae57610cad610c42565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4c657373205468616e204d696e2056616c75652e000000000000000000000000600082015250565b6000610d1e601483610b96565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b600081905092915050565b50565b6000610d6f600083610d54565b9150610d7a82610d5f565b600082019050919050565b6000610d9082610d62565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610dd0600683610b96565b9150610ddb82610d9a565b602082019050919050565b60006020820190508181036000830152610dff81610dc3565b9050919050565b6000610e11826109d5565b9150610e1c836109d5565b9250828202610e2a816109d5565b91508282048414831517610e4157610e40610c42565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e82826109d5565b9150610e8d836109d5565b925082610e9d57610e9c610e48565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec781610ea8565b8114610ed257600080fd5b50565b600081519050610ee481610ebe565b92915050565b6000819050919050565b610efd81610eea565b8114610f0857600080fd5b50565b600081519050610f1a81610ef4565b92915050565b600081519050610f2f81610b3d565b92915050565b600080600080600060a08688031215610f5157610f50610a09565b5b6000610f5f88828901610ed5565b9550506020610f7088828901610f0b565b9450506040610f8188828901610f20565b9350506060610f9288828901610f20565b9250506080610fa388828901610ed5565b9150509295509295909350565b6000610fbb82610eea565b9150610fc683610eea565b9250828202610fd481610eea565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561100c5761100b610c42565b5b828205841483151761102157611020610c42565b5b509291505056fea2646970667358221220221c496ebce9da56cb9f24d93c72a4833421c3a52f32334a86b5e1880026972364736f6c63430008130033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461011d578063b60d428814610148578063be2693f014610152578063d7b4750c1461015c5761007b565b80633ccfd60b146100805780634dc936161461008a5780637a85ab06146100b5578063893d20e8146100f2575b600080fd5b610088610199565b005b34801561009657600080fd5b5061009f61037c565b6040516100ac91906109ee565b60405180910390f35b3480156100c157600080fd5b506100dc60048036038101906100d79190610a6c565b610389565b6040516100e991906109ee565b60405180910390f35b3480156100fe57600080fd5b506101076103d2565b6040516101149190610aa8565b60405180910390f35b34801561012957600080fd5b506101326103fa565b60405161013f9190610b22565b60405180910390f35b610150610424565b005b61015a61054d565b005b34801561016857600080fd5b50610183600480360381019061017e9190610b69565b61081a565b6040516101909190610aa8565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610227576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021e90610bf3565b60405180910390fd5b60005b6000805490508110156102d257600080828154811061024c5761024b610c13565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806102ca90610c71565b91505061022a565b50600067ffffffffffffffff8111156102ee576102ed610cb9565b5b60405190808252806020026020018201604052801561031c5781602001602082028036833780820191505090505b506000908051906020019061033292919061092e565b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610379573d6000803e3d6000fd5b50565b6802b5e3af16b188000081565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b1880000610463600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461086190919063ffffffff16565b10156104a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049b90610d34565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d290610bf3565b60405180910390fd5b60008080548060200260200160405190810160405280929190818152602001828054801561065e57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610614575b5050505050905060005b81518110156106e957600082828151811061068657610685610c13565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505080806106e190610c71565b915050610668565b50600067ffffffffffffffff81111561070557610704610cb9565b5b6040519080825280602002602001820160405280156107335781602001602082028036833780820191505090505b506000908051906020019061074992919061092e565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161079090610d85565b60006040518083038185875af1925050503d80600081146107cd576040519150601f19603f3d011682016040523d82523d6000602084013e6107d2565b606091505b5050905080610816576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080d90610de6565b60405180910390fd5b5050565b600080828154811061082f5761082e610c13565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60008061086d8361089d565b90506000670de0b6b3a764000085836108869190610e06565b6108909190610e77565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156108eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090f9190610f35565b5050509150506402540be400816109269190610fb0565b915050919050565b8280548282559060005260206000209081019282156109a7579160200282015b828111156109a65782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061094e565b5b5090506109b491906109b8565b5090565b5b808211156109d15760008160009055506001016109b9565b5090565b6000819050919050565b6109e8816109d5565b82525050565b6000602082019050610a0360008301846109df565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3982610a0e565b9050919050565b610a4981610a2e565b8114610a5457600080fd5b50565b600081359050610a6681610a40565b92915050565b600060208284031215610a8257610a81610a09565b5b6000610a9084828501610a57565b91505092915050565b610aa281610a2e565b82525050565b6000602082019050610abd6000830184610a99565b92915050565b6000819050919050565b6000610ae8610ae3610ade84610a0e565b610ac3565b610a0e565b9050919050565b6000610afa82610acd565b9050919050565b6000610b0c82610aef565b9050919050565b610b1c81610b01565b82525050565b6000602082019050610b376000830184610b13565b92915050565b610b46816109d5565b8114610b5157600080fd5b50565b600081359050610b6381610b3d565b92915050565b600060208284031215610b7f57610b7e610a09565b5b6000610b8d84828501610b54565b91505092915050565b600082825260208201905092915050565b7f53656e646572206973206e6f74206f776e657200000000000000000000000000600082015250565b6000610bdd601383610b96565b9150610be882610ba7565b602082019050919050565b60006020820190508181036000830152610c0c81610bd0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c7c826109d5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610cae57610cad610c42565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4c657373205468616e204d696e2056616c75652e000000000000000000000000600082015250565b6000610d1e601483610b96565b9150610d2982610ce8565b602082019050919050565b60006020820190508181036000830152610d4d81610d11565b9050919050565b600081905092915050565b50565b6000610d6f600083610d54565b9150610d7a82610d5f565b600082019050919050565b6000610d9082610d62565b9150819050919050565b7f4661696c65640000000000000000000000000000000000000000000000000000600082015250565b6000610dd0600683610b96565b9150610ddb82610d9a565b602082019050919050565b60006020820190508181036000830152610dff81610dc3565b9050919050565b6000610e11826109d5565b9150610e1c836109d5565b9250828202610e2a816109d5565b91508282048414831517610e4157610e40610c42565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610e82826109d5565b9150610e8d836109d5565b925082610e9d57610e9c610e48565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610ec781610ea8565b8114610ed257600080fd5b50565b600081519050610ee481610ebe565b92915050565b6000819050919050565b610efd81610eea565b8114610f0857600080fd5b50565b600081519050610f1a81610ef4565b92915050565b600081519050610f2f81610b3d565b92915050565b600080600080600060a08688031215610f5157610f50610a09565b5b6000610f5f88828901610ed5565b9550506020610f7088828901610f0b565b9450506040610f8188828901610f20565b9350506060610f9288828901610f20565b9250506080610fa388828901610ed5565b9150509295509295909350565b6000610fbb82610eea565b9150610fc683610eea565b9250828202610fd481610eea565b91507f8000000000000000000000000000000000000000000000000000000000000000841460008412161561100c5761100b610c42565b5b828205841483151761102157611020610c42565b5b509291505056fea2646970667358221220221c496ebce9da56cb9f24d93c72a4833421c3a52f32334a86b5e1880026972364736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 326,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 330,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "amtFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 335,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)104"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)104": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}