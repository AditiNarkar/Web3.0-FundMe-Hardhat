{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorInterface {\n  function latestAnswer() external view returns (int256);\n\n  function latestTimestamp() external view returns (uint256);\n\n  function latestRound() external view returns (uint256);\n\n  function getAnswer(uint256 roundId) external view returns (int256);\n\n  function getTimestamp(uint256 roundId) external view returns (uint256);\n\n  event AnswerUpdated(int256 indexed current, uint256 indexed roundId, uint256 updatedAt);\n\n  event NewRound(uint256 indexed roundId, address indexed startedBy, uint256 startedAt);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV2V3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {AggregatorInterface} from \"./AggregatorInterface.sol\";\nimport {AggregatorV3Interface} from \"./AggregatorV3Interface.sol\";\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV2V3Interface is AggregatorInterface, AggregatorV3Interface {}\n"
    },
    "@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(\n    uint80 _roundId\n  ) external view returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n  function latestRoundData()\n    external\n    view\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"../shared/interfaces/AggregatorV2V3Interface.sol\";\n\n/**\n * @title MockV3Aggregator\n * @notice Based on the FluxAggregator contract\n * @notice Use this contract when you need to test\n * other contract's ability to read data from an\n * aggregator contract, but how the aggregator got\n * its answer is unimportant\n */\ncontract MockV3Aggregator is AggregatorV2V3Interface {\n  uint256 public constant override version = 0;\n\n  uint8 public override decimals;\n  int256 public override latestAnswer;\n  uint256 public override latestTimestamp;\n  uint256 public override latestRound;\n\n  mapping(uint256 => int256) public override getAnswer;\n  mapping(uint256 => uint256) public override getTimestamp;\n  mapping(uint256 => uint256) private getStartedAt;\n\n  constructor(uint8 _decimals, int256 _initialAnswer) {\n    decimals = _decimals;\n    updateAnswer(_initialAnswer);\n  }\n\n  function updateAnswer(int256 _answer) public {\n    latestAnswer = _answer;\n    latestTimestamp = block.timestamp;\n    latestRound++;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = block.timestamp;\n    getStartedAt[latestRound] = block.timestamp;\n  }\n\n  function updateRoundData(uint80 _roundId, int256 _answer, uint256 _timestamp, uint256 _startedAt) public {\n    latestRound = _roundId;\n    latestAnswer = _answer;\n    latestTimestamp = _timestamp;\n    getAnswer[latestRound] = _answer;\n    getTimestamp[latestRound] = _timestamp;\n    getStartedAt[latestRound] = _startedAt;\n  }\n\n  function getRoundData(\n    uint80 _roundId\n  )\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (_roundId, getAnswer[_roundId], getStartedAt[_roundId], getTimestamp[_roundId], _roundId);\n  }\n\n  function latestRoundData()\n    external\n    view\n    override\n    returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n  {\n    return (\n      uint80(latestRound),\n      getAnswer[latestRound],\n      getStartedAt[latestRound],\n      getTimestamp[latestRound],\n      uint80(latestRound)\n    );\n  }\n\n  function description() external pure override returns (string memory) {\n    return \"v0.8/tests/MockV3Aggregator.sol\";\n  }\n}\n"
    },
    "contracts/FundMe.sol": {
      "content": "// Gets funds from users\r\n// withdraw\r\n// set min value in usd\r\n\r\n// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport \"./PriceConverterLib.sol\";\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\ncontract FundMe {\r\n    //Type Declarations\r\n    using PriceConverter for uint256;\r\n\r\n    //State Variables\r\n    // i => immutable, cheapest variables\r\n    // s => storage, costliest\r\n    uint256 public constant MINUSD = 50 * 1e18;\r\n\r\n    address[] private funders;\r\n    mapping(address => uint256) private amtFunded;\r\n\r\n    address private immutable i_owner;\r\n\r\n    AggregatorV3Interface private priceFeed;\r\n\r\n    //modifiers\r\n    modifier onlyOwnerAccess() {\r\n        require(msg.sender == i_owner, \"Sender is not owner\");\r\n        _; // rest of the code\r\n    }\r\n\r\n    // functions\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender; // whoever is deploying the contract\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    function fund() public payable {\r\n        //require(getConversionRate(msg.value) >= MINUSD, \"Less Than Min Value\"); // 1e10 == 1 * 10 ** 18 (18 decimal places)\r\n        require(\r\n            msg.value.getConversionRate(priceFeed) >= MINUSD,\r\n            \"Less Than Min Value.\"\r\n        );\r\n\r\n        funders.push(msg.sender);\r\n        amtFunded[msg.sender] = msg.value;\r\n    }\r\n\r\n    function withdraw() public payable onlyOwnerAccess {\r\n        // funders array, which contains the addresses of all users who have contributed funds (amtFunded mapping).\r\n        //For each funder, it sets their funded amount to zero (amtFunded[funder] = 0), effectively clearing their contribution.\r\n\r\n        // for loop costs a lot to read from stoarge variable funders\r\n        for (uint256 i = 0; i < funders.length; i++) {\r\n            address funder = funders[i];\r\n            amtFunded[funder] = 0;\r\n        }\r\n\r\n        //It then resets the funders array to an empty array (new address ), effectively clearing the list of funders.\r\n        funders = new address[](0); // reset\r\n\r\n        // transfer\r\n        // msg.sender = address\r\n        // address(this) sends whole contract address\r\n        payable(msg.sender).transfer(address(this).balance);\r\n\r\n        // send\r\n        // bool success = payable(msg.sender).send(address(this).balance);\r\n        // require(success, \"Failed\");\r\n\r\n        //call\r\n        // (bool success, ) = payable(msg.sender).call{\r\n        //     value: address(this).balance\r\n        // }(\"\");\r\n        // require(success, \"Failed\");\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwnerAccess {\r\n        address[] memory m_funders = funders; // memory is cheaper than storage. funders is storage variable\r\n        // mapping not allowed in memory\r\n        for (uint256 i = 0; i < m_funders.length; i++) {\r\n            address funder = m_funders[i];\r\n            amtFunded[funder] = 0;\r\n        }\r\n        funders = new address[](0); // reset\r\n        (bool success, ) = i_owner.call{value: address(this).balance}(\"\");\r\n        require(success, \"Failed\");\r\n    }\r\n\r\n    //getters\r\n    function getOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function getFunder(uint256 i) public view returns (address) {\r\n        return funders[i];\r\n    }\r\n\r\n    function getAmtFunded(address funder) public view returns (uint256) {\r\n        return amtFunded[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return priceFeed;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverterLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity 0.8.19;\r\n\r\nimport {AggregatorV3Interface} from \"@chainlink/contracts/src/v0.8/shared/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(\r\n        AggregatorV3Interface priceFeed\r\n    ) public view returns (uint256) {\r\n        //ABI\r\n        // Address 0x694AA1769357215DE4FAC081bf1f309aDC325306 from ChainLink\r\n\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        // price is int256 becoz some can be negative\r\n        // price is ETH in terms of USD i.e. 3000.00000000\r\n        // to match decimals multiply with 10 more decimals\r\n\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    // function getVersion() internal view returns (uint256) {\r\n    //     AggregatorV3Interface priceFeed = AggregatorV3Interface(\r\n    //         0x694AA1769357215DE4FAC081bf1f309aDC325306\r\n    //     );\r\n    //     return priceFeed.version();\r\n    // }\r\n\r\n    function getConversionRate(\r\n        uint256 ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        // 3000_000000000000000000 = ETH / USD price\r\n        // 1_000000000000000000 ETH\r\n        uint256 ethAmountInUSD = (ethPrice * ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "contracts/test/MockV3Aggregator.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/tests/MockV3Aggregator.sol\";\r\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}